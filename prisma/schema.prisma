generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Recommendation {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  anime     Anime    @relation("Anime", fields: [animeId], references: [id])
  animeId   String   @db.ObjectId
  note      String

  fromUsername String
  from         User   @relation("RecommendationsGiven", fields: [fromUsername], references: [username])
  toUsername   String
  to           User   @relation("RecommendationsReceived", fields: [toUsername], references: [username])
}

model Anime {
  id                String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt         DateTime         @default(now())
  updatedAt         DateTime         @updatedAt
  title             String
  imageUrl          String
  synopsis          String
  year              Int
  airing            Boolean
  malUrl            String
  malId             Int              @unique
  recommendations   Recommendation[] @relation("Anime")
  usersFavoritesIDs String[]         @db.ObjectId
  usersFavorite     User[]           @relation("Favorites", fields: [usersFavoritesIDs], references: [id])
  usersWatchedIDs   String[]         @db.ObjectId
  usersWatched      User[]           @relation("Watched", fields: [usersWatchedIDs], references: [id])
  usersWatchingIDs  String[]         @db.ObjectId
  usersWatching     User[]           @relation("Watching", fields: [usersWatchingIDs], references: [id])
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  username String @unique
  imageUrl String
  clerkId  String @unique

  recommendationsReceived Recommendation[] @relation("RecommendationsReceived")
  recommendationsGiven    Recommendation[] @relation("RecommendationsGiven")
  favoritesIDs            String[]         @db.ObjectId
  favorites               Anime[]          @relation("Favorites", fields: [favoritesIDs], references: [id])
  watchedIDs              String[]         @db.ObjectId
  watched                 Anime[]          @relation("Watched", fields: [watchedIDs], references: [id])
  watchingIDs             String[]         @db.ObjectId
  watching                Anime[]          @relation("Watching", fields: [watchingIDs], references: [id])
  followedByIDs           String[]         @db.ObjectId
  followedBy              User[]           @relation("UserFollows", fields: [followedByIDs], references: [id])
  followingIDs            String[]         @db.ObjectId
  following               User[]           @relation("UserFollows", fields: [followingIDs], references: [id])
}
